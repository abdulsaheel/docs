{
    "post": {
        "operationId": "verifyMessage",
        "summary": "Verify message.",
        "description": "The `/auth/verify` endpoint verifies a signed Sign-In with Ethereum (`SIWE`) message along with the provided `nonce`, and, upon successful verification, issues a `JSON Web Token` (JWT) for authentication.",
        "security": [],
        "requestBody": {
            "required": true,
            "content": {
                "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {
                            "message": {
                                "type": "string",
                                "example": "beta.garden.finance wants you to sign in with your Ethereum account:\n0xDda173bd23b07007394611D789EF789a9Aae5CF5\n\nGarden.fi\n\nURI: https://beta.garden.finance\nVersion: 1\nChain ID: 11155111\nNonce: ccecfc7e76a9c1f3d60ed7d7a7f12af7522714ad6e1c3a34980118d0d7866dbb\nIssued At: 2024-12-31T12:07:23.770Z\nNot Before: 2024-12-31T12:12:23.365Z",
                                "description": "The message to be verified."
                            },
                            "signature": {
                                "type": "string",
                                "example": "0x966de683f1b41097bf5212a0c98a4f422df76b462a81ef45225a9f13bf83c643054126472d1045537f47e26a1f0a3b166e1c46a6a64255044db502e5975cbc691c",
                                "description": "The signed message to verify."
                            },
                            "nonce": {
                                "type": "string",
                                "example": "b8bc718d6af38a0d2cac5085c53f617a52e590b0ff4ad2c4abb0825e9cc39079",
                                "description": "The nonce generated previously for the user to sign."
                            }
                        },
                        "required": [
                            "message",
                            "signature",
                            "nonce"
                        ]
                    }
                }
            }
        },
        "responses": {
            "200": {
                "description": "JWT token successfully returned.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "type": "string",
                                    "example": "Ok",
                                    "description": "An enum representing the possible outcomes of the endpoint, indicating whether the request was successful.",
                                    "enum": ["Ok","Error"]
                                },
                                "result": {
                                    "type": "string",
                                    "example": "0x966de683f1b41097bf5212a0c98a4f422df76b462a81ef45225a9f13bf83c643054126472d1045537f47e26a1f0a3b166e1c46a6a64255044db502e5975cbc691c",
                                    "description": "JWT token issued for authenticated user used for session validation in subsequent API requests."
                                }
                            }
                        }
                    }
                }
            },
            "400": {
                "description": "Bad request due to invalid parameters.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "type": "string",
                                    "example": "Error",
                                    "description": "An enum representing the possible outcomes of the endpoint, indicating whether the request was successful.",
                                    "enum": ["Ok","Error"]
                                },
                                "error": {
                                    "type": "string",
                                    "example": "Invalid message",
                                    "description": "Returns an error if the nonce, message, or signature is invalid, indicating verification failure."
                                }
                            }
                        }
                    }
                }
            },
            "500": {
                "description": "Internal Server Error. The server failed to process the request.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "type": "string",
                                    "example": "Error",
                                    "description": "Enum representing the success of /nonce",
                                    "enum": ["Ok","Error"]
                                },
                                "error": {
                                    "type": "string",
                                    "description": "Error message explaining the server-side issue.",
                                    "example": "internal error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "tags": [
            "Auth"
        ]
    }
}
